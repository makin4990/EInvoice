@page "/"
@using EInvoice.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<h3>E-Fatura -> Excel Converter(Müşteri)</h3>


<div class="row">
    <div class="col-md-6">
        <InputFile Id="fileInput" OnChange="@LoadFiles" multiple class="form-control" accept=".xml"/>
    </div>
</div>

@if (files.Any())
{
    <div class="mt-3">
        <h4>Seçili xml dosyaları:</h4>
        <ul class="list-group col-md-6">
            @foreach (var file in files)
            {
                <li class="list-group-item">@file.Name</li>
            }
        </ul>
        
        <button class="btn btn-primary mt-3" @onclick="ConvertFiles">
            Excel'e dönüştür
        </button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private List<IBrowserFile> files = new();
    private string errorMessage;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles().ToList();
        Console.WriteLine(files.First().Name);
        errorMessage = null;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

            await JSRuntime.InvokeVoidAsync("customizeFileInput");
    }

    private async Task ConvertFiles()
    {
        try
        {
            var formFiles = new List<IFormFile>();
            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 2*1024*1024).CopyToAsync(ms);
                ms.Position = 0;
                
                formFiles.Add(new FormFile(ms, 0, ms.Length, file.Name, file.Name));
            }

            CustomerInvoiceConverter customerInvoiceConverter = new();
            var excelStream = await customerInvoiceConverter.ConvertToExcel(formFiles);
            
            // Download the Excel file
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", 
                "converted_files.xlsx", 
                excelStream.ToArray());
        }
        catch (Exception ex)
        {
            errorMessage = $"Error converting files: {ex.Message}";
        }
    }
}
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = new Uint8Array(contentStreamReference);
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName;
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
    function customizeFileInput() {
        const fileInput = document.getElementById("fileInput");
        if (fileInput) {
            // Change "Choose Files" text to "dosya seç"
            fileInput.setAttribute("title", "dosya seç");
        }
    }
</script>
<style>
    .label {
        width: 15rem;
        height: 2.5rem;
        border: 2px dashed;
        border-radius: 5px;
        display: block;
        padding: 0.5em;
        transition: border 300ms ease;
        cursor: pointer;
        text-align: center;
    }
    i{
        display: block;
        font-size: 42px;
        padding-bottom: 16px;
    }
    
    .title {
        transition: 200ms color;
    }
    
    .label:hover {
        border: 2px solid;
    }</style>